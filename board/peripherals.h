/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_edma.h"
#include "fsl_dmamux.h"
#include "fsl_common.h"
#include "fsl_clock.h"
#include "fsl_ftm.h"
#include "fsl_adc16.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_uart.h"
#include "fsl_uart_freertos.h"
#include "fsl_i2c.h"
#include "fsl_i2c_freertos.h"
#include "fsl_dac.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Used DMA device. */
#define DMA_DMA_BASEADDR DMA0
/* Associated DMAMUX device that is used for muxing of requests. */
#define DMA_DMAMUX_BASEADDR DMAMUX
/* Definition of peripheral ID */
#define FTM2_PERIPHERAL FTM2
/* Definition of the clock source frequency */
#define FTM2_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* Definition of the clock source frequency */
#define FTM2_TIMER_MODULO_VALUE (((FTM2_CLOCK_SOURCE/ (1U << (FTM2_PERIPHERAL->SC & FTM_SC_PS_MASK))) / 50) - 1)
/* Definition of FTM2 channel/pair number 0 on Edge-aligned PWM */
#define FTM2_PWM_SERVO_1_CHANNEL kFTM_Chnl_0
/* Definition of FTM2 channel/pair number 1 on Edge-aligned PWM */
#define FTM2_PWM_SERVO_2_CHANNEL kFTM_Chnl_1
/* Alias for ADC0 peripheral */
#define ADC0_PERIPHERAL ADC0
/* ADC0 interrupt vector ID (number). */
#define ADC0_IRQN ADC0_IRQn
/* ADC0 interrupt vector priority. */
#define ADC0_IRQ_PRIORITY 4
/* ADC0 interrupt handler identifier. */
#define ADC0_IRQHANDLER ADC0_IRQHandler
/* Channel 0 (SE.3) conversion control group. */
#define ADC0_CH0_CONTROL_GROUP 0
/* Alias for ADC1 peripheral */
#define ADC1_PERIPHERAL ADC1
/* ADC1 interrupt vector ID (number). */
#define ADC1_IRQN ADC1_IRQn
/* ADC1 interrupt vector priority. */
#define ADC1_IRQ_PRIORITY 4
/* ADC1 interrupt handler identifier. */
#define ADC1_IRQHANDLER ADC1_IRQHandler
/* Channel 0 (SE.3) conversion control group. */
#define ADC1_CH0_CONTROL_GROUP 0
/* Channel 1 (SE.1) conversion control group. */
#define ADC1_CH1_CONTROL_GROUP 0
/* Definition of peripheral ID */
#define FTM0_PERIPHERAL FTM0
/* Definition of the clock source frequency */
#define FTM0_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* Definition of the clock source frequency */
#define FTM0_TIMER_MODULO_VALUE (((FTM0_CLOCK_SOURCE/ (1U << (FTM0_PERIPHERAL->SC & FTM_SC_PS_MASK))) / 50) - 1)
/* Definition of FTM0 channel/pair number 0 on Edge-aligned PWM */
#define FTM0_PWM_MOT_A_CHANNEL kFTM_Chnl_0
/* Definition of FTM0 channel/pair number 1 on Edge-aligned PWM */
#define FTM0_PWM_MOT_B_CHANNEL kFTM_Chnl_1
/* Definition of peripheral ID */
#define FTM3_PERIPHERAL FTM3
/* Definition of the clock source frequency */
#define FTM3_CLOCK_SOURCE 60000000UL
/* Definition of the clock source frequency */
#define FTM3_TIMER_MODULO_VALUE 1499
/* FTM3 interrupt vector ID (number). */
#define FTM3_IRQN FTM3_IRQn
/* FTM3 interrupt vector priority. */
#define FTM3_IRQ_PRIORITY 4
/* FTM3 interrupt handler identifier. */
#define FTM3_IRQHANDLER FTM3_IRQHandler
/* Alias for GPIOC peripheral */
#define GPIOC_GPIO GPIOC
/* Definition of peripheral ID */
#define UART3_PERIPHERAL UART3
/* Definition of the clock source frequency */
#define UART3_CLOCK_SOURCE CLOCK_GetFreq(UART3_CLK_SRC)
/* Definition of the backround buffer size */
#define UART3_BACKGROUND_BUFFER_SIZE 512
/* UART3 interrupt vector ID (number). */
#define UART3_SERIAL_RX_TX_IRQN UART3_RX_TX_IRQn
/* UART3 interrupt vector priority. */
#define UART3_SERIAL_RX_TX_IRQ_PRIORITY 4
/* UART3 interrupt vector ID (number). */
#define UART3_SERIAL_ERROR_IRQN UART3_ERR_IRQn
/* UART3 interrupt vector priority. */
#define UART3_SERIAL_ERROR_IRQ_PRIORITY 4
/* Definition of peripheral ID */
#define UART4_PERIPHERAL UART4
/* Definition of the clock source frequency */
#define UART4_CLOCK_SOURCE CLOCK_GetFreq(UART4_CLK_SRC)
/* Definition of the backround buffer size */
#define UART4_BACKGROUND_BUFFER_SIZE 512
/* UART4 interrupt vector ID (number). */
#define UART4_SERIAL_RX_TX_IRQN UART4_RX_TX_IRQn
/* UART4 interrupt vector priority. */
#define UART4_SERIAL_RX_TX_IRQ_PRIORITY 4
/* UART4 interrupt vector ID (number). */
#define UART4_SERIAL_ERROR_IRQN UART4_ERR_IRQn
/* UART4 interrupt vector priority. */
#define UART4_SERIAL_ERROR_IRQ_PRIORITY 4
/* BOARD_InitPeripherals defines for I2C0 */
/* Definition of peripheral ID */
#define I2C0_PERIPHERAL I2C0
/* Definition of the clock source */
#define I2C0_CLOCK_SOURCE I2C0_CLK_SRC
/* Definition of the clock source frequency */
#define I2C0_CLK_FREQ CLOCK_GetFreq(I2C0_CLOCK_SOURCE)
/* I2C0 interrupt vector ID (number). */
#define I2C0_IRQN I2C0_IRQn
/* I2C0 interrupt vector priority. */
#define I2C0_IRQ_PRIORITY 4
/* Alias for DAC0 peripheral */
#define DAC0_PERIPHERAL DAC0

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const edma_config_t DMA_config;
extern const ftm_config_t FTM2_config;
extern adc16_channel_config_t ADC0_channelsConfig[1];
extern const adc16_config_t ADC0_config;
extern const adc16_channel_mux_mode_t ADC0_muxMode;
extern adc16_channel_config_t ADC1_channelsConfig[2];
extern const adc16_config_t ADC1_config;
extern const adc16_channel_mux_mode_t ADC1_muxMode;
extern const ftm_config_t FTM0_config;
extern const ftm_config_t FTM3_config;
extern uart_rtos_handle_t UART3_rtos_handle;
extern uart_handle_t UART3_uart_handle;
extern uart_rtos_config_t UART3_rtos_config;
extern uart_rtos_handle_t UART4_rtos_handle;
extern uart_handle_t UART4_uart_handle;
extern uart_rtos_config_t UART4_rtos_config;
extern i2c_rtos_handle_t I2C0_rtosHandle;
extern const i2c_master_config_t I2C0_config;
extern const dac_config_t DAC0_config;

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
